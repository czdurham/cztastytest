package com.czdurham.tasty.rest.controllers;

import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.util.UriComponentsBuilder;

import com.czdurham.tasty.core.domain.tasting.TastingDetails;
import com.czdurham.tasty.core.events.tasting.TastingCreateRequest;
import com.czdurham.tasty.core.events.tasting.TastingCreatedEvent;
import com.czdurham.tasty.core.events.tasting.TastingDeleteRequest;
import com.czdurham.tasty.core.events.tasting.TastingDeletedEvent;
import com.czdurham.tasty.rest.domain.tasting.Tasting;
import com.czdurham.tasty.services.TastingService;

@Controller
@RequestMapping(value="/tastings")
public class TastingCommandsController {
	private static final Class<TastingCommandsController> THIS_CLASS = TastingCommandsController.class;
	private static final Logger LOG = LoggerFactory.getLogger(THIS_CLASS);

	@Autowired
	private TastingService tastingService;

	@RequestMapping(method = RequestMethod.POST)
	public ResponseEntity<Tasting> createTasting(
			@RequestBody Tasting tasting,
			UriComponentsBuilder builder) {
		LOG.debug("Entered createTasting");
		TastingDetails tastingDetails = tasting.toDetails();
		TastingCreateRequest request = new TastingCreateRequest(tastingDetails);
		TastingCreatedEvent event = tastingService.requestTastingCreate(request);

		TastingDetails newTastingDetails = event.getTastingDetails();
		Tasting newTasting = Tasting.fromDetails(newTastingDetails);

		HttpHeaders headers = new HttpHeaders();
		headers.setLocation(builder.path("/tastings/{id}").buildAndExpand(newTastingDetails.getKey()).toUri());

		return new ResponseEntity<Tasting>(newTasting, headers, HttpStatus.CREATED);
	}

	@RequestMapping(method = RequestMethod.DELETE, value = "/{id}")
	public ResponseEntity<Tasting> deleteTasting(@PathVariable UUID id) {
		LOG.debug("Entered deleteTasting");
		TastingDeleteRequest request = new TastingDeleteRequest(id);
		TastingDeletedEvent event = tastingService.requestTastingDelete(request);

		if (!event.isFound()) {
			return new ResponseEntity<Tasting>(HttpStatus.NOT_FOUND);
		}

		TastingDetails tastingDetails = event.getTastingDetails();
		Tasting tasting = Tasting.fromDetails(tastingDetails);

		if (!event.isDeleted()) {
			return new ResponseEntity<Tasting>(HttpStatus.FORBIDDEN);
		}

		return new ResponseEntity<Tasting>(tasting, HttpStatus.OK);
	}
}
