package com.czdurham.tasty.controllers;

import java.util.UUID;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.springframework.http.MediaType;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultHandlers;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import com.czdurham.tasty.events.tasting.TastingDeleteRequest;
import com.czdurham.tasty.events.tasting.TastingDetailsRequest;
import com.czdurham.tasty.events.tasting.TastingEventsFixtures;
import com.czdurham.tasty.services.TastingService;

public class TastingCommandsIntegrationTest {
	MockMvc mockMvc;

	@InjectMocks
	TastingCommandsController controller;

	@Mock
	TastingService service;

	UUID key = UUID.randomUUID();

	@Before
	public void setup() {
		MockitoAnnotations.initMocks(this);
		mockMvc = MockMvcBuilders.standaloneSetup(controller)
				.setMessageConverters(new MappingJackson2HttpMessageConverter()).build();
	}

	@Test
	public void thatViewOrderUsesHttpNotFound() throws Exception {
		Mockito.when(service.requestTastingDetails(Mockito.any(TastingDetailsRequest.class)))
			.thenReturn(TastingEventsFixtures.tastingDetailsNotFound(key));

		mockMvc.perform(
				MockMvcRequestBuilders.get("/tastings/{id}",  key)
					.accept(MediaType.APPLICATION_JSON))
				.andDo(MockMvcResultHandlers.print())
				.andExpect(MockMvcResultMatchers.status().isNotFound());
	}

	@Test
	public void thatDeleteOrderUsesHttpOkOnSuccess() throws Exception {
		Mockito.when(service.requestTastingDelete(Mockito.any(TastingDeleteRequest.class)))
			.thenReturn(TastingEventsFixtures.tastingDeleted(key));

		mockMvc.perform(
				MockMvcRequestBuilders.delete("/tastings/{id}", key)
					.accept(MediaType.APPLICATION_JSON))
				.andDo(MockMvcResultHandlers.print())
				.andExpect(MockMvcResultMatchers.status().isOk());

		ArgumentCaptor<TastingDeleteRequest> argument = ArgumentCaptor.forClass(TastingDeleteRequest.class);
		Mockito.verify(service).requestTastingDelete(argument.capture());
		Assert.assertEquals(argument.getKey(), key);
	}

	@Test
	public void thatDeleteOrderUsesHttpNotFoundOnEntityLookupFailure() throws Exception {

	when(orderService.deleteOrder(any(DeleteOrderEvent.class)))
	.thenReturn(
	orderDeletedNotFound(key));

	this.mockMvc.perform(
	delete("/aggregators/orders/{id}", key.toString())
	.accept(MediaType.APPLICATION_JSON))
	.andDo(print())
	.andExpect(status().isNotFound());

	}

	@Test
	public void thatDeleteOrderUsesHttpForbiddenOnEntityDeletionFailure() throws Exception {

	when(orderService.deleteOrder(any(DeleteOrderEvent.class)))
	.thenReturn(
	orderDeletedFailed(key));

	this.mockMvc.perform(
	delete("/aggregators/orders/{id}", key.toString())
	.accept(MediaType.APPLICATION_JSON))
	.andDo(print())
	.andExpect(status().isForbidden());
	}
}
