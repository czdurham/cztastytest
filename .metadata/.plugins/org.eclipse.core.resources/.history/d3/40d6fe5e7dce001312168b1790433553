package com.czdurham.tasty.core.services;

import com.czdurham.tasty.core.domain.tasting.Tasting;
import com.czdurham.tasty.core.domain.tasting.TastingDetails;
import com.czdurham.tasty.core.domain.tasting.TastingStatusDetails;
import com.czdurham.tasty.core.events.tasting.TastingCreateRequest;
import com.czdurham.tasty.core.events.tasting.TastingCreatedEvent;
import com.czdurham.tasty.core.events.tasting.TastingDeleteRequest;
import com.czdurham.tasty.core.events.tasting.TastingDeletedEvent;
import com.czdurham.tasty.core.events.tasting.TastingDetailsEvent;
import com.czdurham.tasty.core.events.tasting.TastingDetailsRequest;
import com.czdurham.tasty.core.events.tasting.TastingStatusEvent;
import com.czdurham.tasty.core.events.tasting.TastingStatusRequest;
import com.czdurham.tasty.core.events.tasting.TastingsDetailsEvent;
import com.czdurham.tasty.core.events.tasting.TastingsDetailsRequest;
import com.czdurham.tasty.core.repository.TastingRepository;

public class TastingEventHandler implements TastingService {
	private final TastingRepository tastingRepository;

	public TastingEventHandler(TastingRepository tastingRepository) {
		this.tastingRepository = tastingRepository;
	}

	@Override
	public TastingCreatedEvent requestTastingCreate(TastingCreateRequest request) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public TastingDetailsEvent requestTastingDetails(
			TastingDetailsRequest request) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public TastingsDetailsEvent requestTastingsDetails(
			TastingsDetailsRequest request) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public TastingStatusEvent requestTastingStatus(TastingStatusRequest request) {
		Tasting tasting = tastingRepository.findById(request.getKey());
		if (tasting == null) {
			return TastingStatusEvent.notFound(request.getKey());
		}

		return new TastingStatusEvent(request.getKey(), tasting.getStatusDetails());
	}

	@Override
	public TastingDeletedEvent requestTastingDelete(TastingDeleteRequest request) {
		Tasting tasting = tastingRepository.findById(request.getKey());
		if (tasting == null) {
			return TastingDeletedEvent.notFound(request.getKey());
		}

		TastingDetails tastingDetails = tasting.toDetails();
		if(!tasting.canBeDeleted()) {
			return TastingDeletedEvent.forbidden(request.getKey(), tastingDetails);
		}
	}
}
